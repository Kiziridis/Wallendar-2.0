openapi: 3.0.3
info:
  title: Wallendar
  description: A simple Wallendar API definition
  termsOfService: http://swagger.io/terms/
  contact:
    name: Wallendar
    email: wallendar@info.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
tags:
- name: Card
  description: Operations about cards.
- name: Wallet
  description: Everything about your wallet.
- name: User
  description: User operations.
- name: Friend Request
  description: Things about your friend requests.
- name: Document
  description: Everything about your documents.
- name: Notification
  description: Operations about notifications.
- name: Event
  description: Operations about events
- name: Calendar
  description: Operations about calendars
- name: CoCreationRequest
  description: Everything about the co-creation of your events.
- name: Invitation
  description: Everything about your event invitations.
servers:
  - url: /
    description: "Main server"
  - url: /Wallendar
    description: "Wallendar 2.0"
paths:
  /user/{receiverId}/friendRequest:
    post:
      tags:
      - Friend Request
      summary: Send a friend request.
      description: |
        FR1: The user must be able to manage friend requests. (send friend request)
      operationId: sendFriendRequest
      parameters:
      - name: receiverId
        in: path
        description: The userId of the receiver of the friend request.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/FriendRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequest'
      x-swagger-router-controller: FriendRequest
  /user/{senderId}/friendRequest/{friendRequestId}:
    get:
      tags:
      - Friend Request
      summary: Receive a friend request.
      description: |
        FR1: The user must be able to manage friend requests. (receive friend request)
      operationId: receiveFriendRequest
      parameters:
      - name: senderId
        in: path
        description: The userId of the sender of the friend request.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: friendRequestId
        in: path
        description: The Id of the friend request.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequest'
      x-swagger-router-controller: FriendRequest
  /friendRequest/{friendRequestId}:
    put:
      tags:
      - Friend Request
      summary: Accept or decline a friend request.
      description: |
        FR1: The user must be able to manage friend requests. (accept or decline friend request)
      operationId: acceptDeclineFriendRequest
      parameters:
      - name: friendRequestId
        in: path
        description: The Id of the friend request.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/FriendRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequest'
      x-swagger-router-controller: FriendRequest
    delete:
      tags:
      - Friend Request
      summary: Cancel a friend request.
      description: |
        FR1: The user must be able to manage friend requests. (cancel friend request)
      operationId: cancelFriendRequest
      parameters:
      - name: friendRequestId
        in: path
        description: The Id of the friend request.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
      x-swagger-router-controller: FriendRequest
  /wallet/{walletId}/card:
    post:
      tags:
      - Wallet
      summary: Add a new card in your wallet.
      description: |
        FR2: The user must be able to manage their cards. (add card)
      operationId: addCard
      parameters:
      - name: walletId
        in: path
        description: Id of the user's wallet
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
      x-swagger-router-controller: Wallet
  /wallet/{walletId}/cards:
    get:
      tags:
      - Wallet
      summary: View all cards in your wallet.
      description: |
        FR2: The user must be able to manage their cards. (view cards)
      operationId: viewCards
      parameters:
      - name: walletId
        in: path
        description: Id of the user's wallet
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cards'
      x-swagger-router-controller: Wallet
  /wallet/{walletId}/card/{cardNumber}:
    get:
      tags:
      - Card
      summary: Select a card from your wallet.
      description: |
        FR2: The user must be able to manage their cards. (select card)
      operationId: selectCard
      parameters:
      - name: walletId
        in: path
        description: Id of the user's wallet
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: cardNumber
        in: path
        description: Number of a user's card
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
      x-swagger-router-controller: Card
    delete:
      tags:
      - Wallet
      summary: Remove a card from your wallet.
      description: |
        FR2: The user must be able to manage their cards. (remove cards)
      operationId: removeCard
      parameters:
      - name: walletId
        in: path
        description: Id of the user's wallet
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: cardNumber
        in: path
        description: Number of a user's card
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
      x-swagger-router-controller: Wallet
  /wallet/{walletId}:
    put:
      tags:
      - Wallet
      summary: Use a card from your wallet.
      description: |
        FR3: The user must be able to use their cards. (use card)
      operationId: useCard
      parameters:
      - name: walletId
        in: path
        description: Id of the user's wallet
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/Wallet'
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
      x-swagger-router-controller: Wallet
  /document:
    post:
      tags:
      - Document
      summary: Add a document to your account.
      description: |
        FR4: The user must be able to manage their documents. (add document)
      operationId: addDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
      x-swagger-router-controller: Document
  /document/{documentId}:
    get:
      tags:
      - Document
      summary: View a document in your account.
      description: |
        FR4: The user must be able to manage their documents. (view document)
      operationId: viewDocument
      parameters:
      - name: documentId
        in: path
        description: Id of the user's document
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
      x-swagger-router-controller: Document
    delete:
      tags:
      - Document
      summary: Delete a document from your account.
      description: |
        FR4: The user must be able to manage their documents. (delete document)
      operationId: deleteDocument
      parameters:
      - name: documentId
        in: path
        description: Id of the user's document
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
      x-swagger-router-controller: Document
  /users:
    get:
      tags:
      - User
      summary: Search for other users.
      description: |
        FR5: The user must be able to search for other users by username.
      operationId: getUsers
      parameters:
      - name: username
        in: query
        description: username provided for the search
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
      x-swagger-router-controller: User
  /notification:
    post:
      tags:
      - Notification
      summary: Create a notification.
      description: |
        FR6: The system must be able to notify the user about their upocoming events (create notification).
      operationId: notification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
      x-swagger-router-controller: Notification
  /notification/{notificationId}:
    get:
      tags:
      - Notification
      summary: Receive a notification.
      description: |
        FR6: The system must be able to notify the user about their upocoming events (receive notification).
      operationId: notify
      parameters:
      - name: notificationId
        in: path
        description: Id of the notification
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
      x-swagger-router-controller: Notification
  /calendar/{calendarId}/event:
    post:
      tags:
      - Calendar
      summary: Add a new event in your calendar.
      description: |
        FR7: The user must be able to manage an event. (add event)
      operationId: addEvent
      parameters:
      - name: calendarId
        in: path
        description: Id of the user's calendar
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      x-swagger-router-controller: Calendar
  /calendar/{calendarId}/event/{eventId}:
    put:
      tags:
      - Event
      summary: Edit an event in your calendar.
      description: |
        FR7: The user must be able to manage an event. (edit event)
      operationId: editEvent
      parameters:
      - name: calendarId
        in: path
        description: Id of the user's calendar
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: eventId
        in: path
        description: Id of the event that needs to be edited
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/Event'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      x-swagger-router-controller: Event
    delete:
      tags:
      - Calendar
      summary: Delete an event from your calendar.
      description: |
        FR7: The user must be able to manage an event. (delete event)
      operationId: deleteEvent
      parameters:
      - name: calendarId
        in: path
        description: Id of the user's calendar
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: eventId
        in: path
        description: Id of the event that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
      x-swagger-router-controller: Calendar
  /calendar/{calendarId}/event/{eventId}/document/{documentId}:
    put:
      tags:
      - Document
      summary: Add a document to an event.
      description: |
        FR8: The user must be able to manage their event documents. (add document to event)
      operationId: addDocumentEvent
      parameters:
      - name: calendarId
        in: path
        description: Id of the user's calendar
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: eventId
        in: path
        description: Id of the event that the user wants to add a document in
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: documentId
        in: path
        description: Id of the document that the user wants to add
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/Event'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      x-swagger-router-controller: Document
    delete:
      tags:
      - Document
      summary: Remove a document from an event.
      description: |
        FR8: The user must be able to manage their event documents. (remove document from an event)
      operationId: deleteDocumentEvent
      parameters:
      - name: calendarId
        in: path
        description: Id of the user's calendar
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: eventId
        in: path
        description: Id of the event that the user wants to remove a document from
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: documentId
        in: path
        description: Id of the document that the user wants to remove
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
      x-swagger-router-controller: Document
  /user/{inviteeId}/calendar/{calendarId}/event/{eventId}/invitation:
    post:
      tags:
      - Invitation
      summary: Invite a user to an event.
      description: |
        FR9: The user must be able to manage their event invitations. (invite other user to an event)
      operationId: inviteEvent
      parameters:
      - name: inviteeId
        in: path
        description: The userId of the user that is invited
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: calendarId
        in: path
        description: Id of the user's calendar
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: eventId
        in: path
        description: Id of the event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/Invitation'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
      x-swagger-router-controller: Invitation
  /user/{inviterId}/calendar/{calendarId}/event/{eventId}/invitation/{invitationId}:
    get:
      tags:
      - Invitation
      summary: Receive an event invitation.
      description: |
        FR9: The user must be able to manage their event invitations. (receive invites from other users)
      operationId: receiveEventInvite
      parameters:
      - name: inviterId
        in: path
        description: The userId of the user that invites
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: calendarId
        in: path
        description: Id of the user's calendar
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: eventId
        in: path
        description: Id of the event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: invitationId
        in: path
        description: Id of the event invitation
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
      x-swagger-router-controller: Invitation
  /calendar/{calendarId}/event{eventId}/invitation{invitationId}:
    delete:
      tags:
      - Invitation
      summary: Cancel an event invitation.
      description: |
        FR9: The user must be able to manage their event invitations. (cancel event invitations)
      operationId: cancelInvite
      parameters:
      - name: calendarId
        in: path
        description: Id of the user's calendar
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: eventId
        in: path
        description: Id of the event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: invitationId
        in: path
        description: Id of the event invitation
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
      x-swagger-router-controller: Invitation
  /invitation/{invitationId}:
    put:
      tags:
      - Invitation
      summary: Accept or decline an event invitation.
      description: |
        FR9: The user must be able to manage their event invitations. (accept or decline event invitations)
      operationId: acceptDeclineEventInvitation
      parameters:
      - name: invitationId
        in: path
        description: The Id of the invitation.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/Invitation'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
      x-swagger-router-controller: Invitation
  /calendar/{calendarId}/findFreeSpots:
    get:
      tags:
      - Calendar
      summary: Find free spots in the user's calendar
      description: |
        FR10: The system must be able to find the free spots in the user's calendar.
      operationId: findFreeSpots
      parameters:
      - name: calendarId
        in: path
        description: Id of the user's calendar
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200'
                x-content-type: application/json
      x-swagger-router-controller: Calendar
  /event:
    post:
      tags:
      - Event
      summary: Create an event.
      description: |
        FR11: The user must be able to create an event
      operationId: createEvent
      requestBody:
        $ref: '#/components/requestBodies/Event'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      x-swagger-router-controller: Event
  /users/{userIds}/calendars/{calendarIds}/findCommonFreeSpots:
    get:
      tags:
      - Calendar
      summary: Find common free spots in the users' calendar
      description: |
        FR12: The system must be able to find the common free spots in the users' calendar.
      operationId: findCommonFreeSpots
      parameters:
      - name: userIds
        in: path
        description: Ids of the users
        required: true
        style: simple
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/User/properties/userId'
      - name: calendarIds
        in: path
        description: Ids of the users calendars
        required: true
        style: simple
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Calendar/properties/calendarId'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200'
                x-content-type: application/json
      x-swagger-router-controller: Calendar
  /users{receiverIds}/coCreationRequest:
    post:
      tags:
      - CoCreationRequest
      summary: Send a co-creation request.
      description: |
        FR13: The user must be able to co-create events. (send co-creation request)
      operationId: sendCoCreationRequest
      parameters:
      - name: receiverIds
        in: path
        description: The userIds of the receivers of the co-creation request
        required: true
        style: simple
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/User/properties/userId'
      requestBody:
        $ref: '#/components/requestBodies/CoCreationRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoCreationRequest'
      x-swagger-router-controller: CoCreationRequest
  /user/{senderId}/coCreationRequest/{coCreationId}:
    get:
      tags:
      - CoCreationRequest
      summary: Receive a co-creation request.
      description: |
        FR13: The user must be able to co-create events. (receive co-creation request)
      operationId: receiveCoCreationRequest
      parameters:
      - name: senderId
        in: path
        description: The userId of the sender of the co-creation request.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: coCreationId
        in: path
        description: Id of the co-creation request
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoCreationRequest'
      x-swagger-router-controller: CoCreationRequest
  /coCreationRequest/{coCreationId}:
    put:
      tags:
      - CoCreationRequest
      summary: "Respond (accept/decline) to a co-creation request, approve / disapprove\
        \ the suggested time slot."
      description: |
        FR13: The user must be able to co-create events. (accept - decline co-creation request)
        FR14: The user must be able to approve/ disapprove the suggested timeslot.
      operationId: coCreation
      parameters:
      - name: coCreationId
        in: path
        description: Id of the co-creation request
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: SuggestedTimeslot
        in: query
        description: Suggested Timeslot
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/CoCreationRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoCreationRequest'
      x-swagger-router-controller: CoCreationRequest
  /users/{userIds}/calendars/{calendarIds}/event:
    post:
      tags:
      - Calendar
      summary: Add an event to all attendants' calendars.
      description: |
        FR15: The system must be able to add the co-created event in the attendants' calendars.
      operationId: addAllCalendars
      parameters:
      - name: userIds
        in: path
        description: Ids of the users
        required: true
        style: simple
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/User/properties/userId'
      - name: calendarIds
        in: path
        description: Ids of the users calendars
        required: true
        style: simple
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Calendar/properties/calendarId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calendars'
      x-swagger-router-controller: Calendar
components:
  schemas:
    Wallet:
      required:
      - Cards
      - NFCon
      - walletId
      type: object
      properties:
        walletId:
          type: integer
        Cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
        NFCon:
          type: boolean
    Card:
      required:
      - card_holder
      - card_number
      - cvv
      - exp_date
      type: object
      properties:
        card_number:
          type: integer
          example: 1111222233334444
        card_holder:
          type: string
          example: Konstantinos Panagiotou
        exp_date:
          type: integer
          example: 22032032
        cvv:
          type: integer
          example: 107
      example:
        card_holder: Konstantinos Panagiotou
        cvv: 107
        card_number: 1111222233334444
        exp_date: 22032032
    Cards:
      type: array
      items:
        $ref: '#/components/schemas/Card'
    FriendRequest:
      required:
      - friendRequestId
      - is_pending
      - receiverId
      - senderId
      type: object
      properties:
        senderId:
          type: integer
        receiverId:
          type: integer
        friendRequestId:
          type: integer
        is_pending:
          type: boolean
      example:
        senderId: 0
        receiverId: 6
        friendRequestId: 1
        is_pending: true
    Document:
      required:
      - documentId
      type: object
      properties:
        documentId:
          type: integer
      example:
        documentId: 0
    User:
      required:
      - email_address
      - password
      - preferred_language
      - userId
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        preferred_language:
          type: string
          enum:
          - Greek
          - English
          - Spanish
          - German
          - French
        email_address:
          type: string
        userId:
          type: integer
      example:
        password: password
        email_address: email_address
        userId: 0
        preferred_language: Greek
        username: username
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    Notification:
      required:
      - notificationId
      type: object
      properties:
        notificationId:
          type: integer
        notificationTime:
          type: integer
      example:
        notificationTime: 6
        notificationId: 0
    Success:
      required:
      - code
      - message
      type: object
    Calendar:
      type: object
      properties:
        calendarId:
          type: integer
        month:
          type: integer
        year:
          type: integer
        date:
          type: integer
        time:
          type: integer
        Day:
          type: string
          enum:
          - Monday
          - Tuesday
          - Wednesday
          - Thursday
          - Friday
          - Saturday
          - Sunday
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
      example:
        date: 5
        calendarId: 0
        month: 6
        year: 1
        time: 5
        Day: Monday
        events:
        - date: 6
          duration: 5
          eventId: 0
          documents:
          - documentId: 0
          - documentId: 0
          time: 1
          place: place
          title: title
          day: Monday
          participants:
          - password: password
            email_address: email_address
            userId: 1
            preferred_language: Greek
            username: username
          - password: password
            email_address: email_address
            userId: 2
            preferred_language: Greek
            username: kizi
        - date: 6
          duration: 5
          eventId: 0
          documents:
          - documentId: 0
          - documentId: 0
          time: 1
          place: place
          title: title
          day: Monday
          participants:
          - password: password
            email_address: email_address
            userId: 0
            preferred_language: Greek
            username: username
          - password: password
            email_address: email_address
            userId: 0
            preferred_language: Greek
            username: username
    Calendars:
      type: array
      items:
        $ref: '#/components/schemas/Calendar'
    Event:
      type: object
      properties:
        eventId:
          type: integer
        date:
          type: integer
        time:
          type: integer
        place:
          type: string
        participants:
          type: array
          items:
            $ref: '#/components/schemas/User'
        day:
          type: string
          enum:
          - Monday
          - Tuesday
          - Wednesday
          - Thursday
          - Friday
          - Saturday
          - Sunday
        duration:
          type: integer
        title:
          type: string
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
      example:
        date: 6
        duration: 5
        eventId: 0
        documents:
        - documentId: 0
        - documentId: 0
        time: 1
        place: place
        title: title
        day: Monday
        participants:
        - password: password
          email_address: email_address
          userId: 0
          preferred_language: Greek
          username: username
        - password: password
          email_address: email_address
          userId: 0
          preferred_language: Greek
          username: username
    Invitation:
      type: object
      properties:
        invitationId:
          type: integer
        inviterId:
          type: integer
        inviteeId:
          type: integer
        is_pending:
          type: boolean
        eventId:
          type: integer
      example:
        eventId: 5
        inviterId: 6
        inviteeId: 1
        invitationId: 0
        is_pending: true
    CoCreationRequest:
      type: object
      properties:
        coCreationId:
          type: integer
        senderId:
          type: integer
        receiverId:
          type: integer
        is_pending:
          type: boolean
        suggestedtimeslot:
          type: array
          items:
            $ref: '#/components/schemas/CoCreationRequest_suggestedtimeslot'
      example:
        senderId: 6
        receiverId: 1
        suggestedtimeslot:
        - date: 5
          time: 5
        - date: 5
          time: 5
        coCreationId: 0
        is_pending: true
    inline_response_200:
      type: object
      properties:
        date:
          $ref: '#/components/schemas/Calendar/properties/date'
        time:
          $ref: '#/components/schemas/Calendar/properties/time'
      example:
        date: "{}"
        time: "{}"
    CoCreationRequest_suggestedtimeslot:
      type: object
      properties:
        date:
          type: integer
        time:
          type: integer
      example:
        date: 5
        time: 5
  requestBodies:
    FriendRequest:
      description: Friend request model
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FriendRequest'
      required: true
    User:
      description: User model
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      required: true
    Card:
      description: Card model
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Card'
    Wallet:
      description: Wallet model
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Wallet'
    Event:
      description: Event model
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Event'
    Invitation:
      description: Invitation model
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invitation'
    CoCreationRequest:
      description: CoCreationRequest model
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CoCreationRequest'
