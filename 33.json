{
  "openapi": "3.0.3",
  "info": {
    "title": "Wallendar",
    "description": "A simple Wallendar API definition",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "Wallendar",
      "email": "wallendar@info.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.11"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://wallendar.swagger.io/api/v3"
    }
  ],
  "tags": [
    {
      "name": "Card",
      "description": "Operations about cards."
    },
    {
      "name": "Wallet",
      "description": "Everything about your wallet."
    },
    {
      "name": "User",
      "description": "User operations."
    },
    {
      "name": "Friend Request",
      "description": "Things about your friend requests."
    },
    {
      "name": "Document",
      "description": "Everything about your documents."
    },
    {
      "name": "Notification",
      "description": "Operations about notifications."
    },
    {
      "name": "Event",
      "description": "Operations about events"
    },
    {
      "name": "Calendar",
      "description": "Operations about calendars"
    },
    {
      "name": "CoCreationRequest",
      "description": "Everything about the co-creation of your events."
    },
    {
      "name": "Invitation",
      "description": "Everything about your event invitations."
    }
  ],
  "paths": {
    "/user/{receiverId}/friendRequest": {
      "post": {
        "tags": [
          "Friend Request"
        ],
        "summary": "Send a friend request.",
        "description": "FR1: The user must be able to manage friend requests. (send friend request)\n",
        "operationId": "SendFriendRequest",
        "parameters": [
          {
            "name": "receiverId",
            "in": "path",
            "description": "The userId of the receiver of the friend request.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/FriendRequest"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendRequest"
                }
              }
            }
          }
        }
      }
    },
    "/user/{senderId}/friendRequest/{friendRequestId}": {
      "get": {
        "tags": [
          "Friend Request"
        ],
        "summary": "Receive a friend request.",
        "description": "FR1: The user must be able to manage friend requests. (receive friend request)\n",
        "operationId": "ReceiveFriendRequest",
        "parameters": [
          {
            "name": "senderId",
            "in": "path",
            "description": "The userId of the sender of the friend request.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "friendRequestId",
            "in": "path",
            "description": "The Id of the friend request.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendRequest"
                }
              }
            }
          }
        }
      }
    },
    "/friendRequest/{friendRequestId}": {
      "delete": {
        "tags": [
          "Friend Request"
        ],
        "summary": "Cancel a friend request.",
        "description": "FR1: The user must be able to manage friend requests. (cancel friend request)\n",
        "operationId": "CancelFriendRequest",
        "parameters": [
          {
            "name": "friendRequestId",
            "in": "path",
            "description": "The Id of the friend request.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Friend Request"
        ],
        "summary": "Accept or decline a friend request.",
        "description": "FR1: The user must be able to manage friend requests. (accept or decline friend request)\n",
        "operationId": "AcceptDeclineFriendRequest",
        "parameters": [
          {
            "name": "friendRequestId",
            "in": "path",
            "description": "The Id of the friend request.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/FriendRequest"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendRequest"
                }
              }
            }
          }
        }
      }
    },
    "/wallet/{walletId}/card": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Add a new card in your wallet.",
        "description": "FR2: The user must be able to manage their cards. (add card)\n",
        "operationId": "AddCard",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "description": "Id of the user's wallet",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Card"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        }
      }
    },
    "/wallet/{walletId}/cards": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "View all cards in your wallet.",
        "description": "FR2: The user must be able to manage their cards. (view cards)\n",
        "operationId": "ViewCards",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "description": "Id of the user's wallet",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cards"
                }
              }
            }
          }
        }
      }
    },
    "/wallet/{walletId}/card/{cardNumber}": {
      "delete": {
        "tags": [
          "Wallet"
        ],
        "summary": "Remove a card from your wallet.",
        "description": "FR2: The user must be able to manage their cards. (remove cards)\n",
        "operationId": "RemoveCard",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "description": "Id of the user's wallet",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cardNumber",
            "in": "path",
            "description": "Number of a user's card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Card"
        ],
        "summary": "Select a card from your wallet.",
        "description": "FR2: The user must be able to manage their cards. (select card)\n",
        "operationId": "SelectCard",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "description": "Id of the user's wallet",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cardNumber",
            "in": "path",
            "description": "Number of a user's card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        }
      }
    },
    "/wallet/{walletId}": {
      "put": {
        "tags": [
          "Wallet"
        ],
        "summary": "Use a card from your wallet.",
        "description": "FR3: The user must be able to use their cards. (use card)\n",
        "operationId": "UseCard",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "description": "Id of the user's wallet",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Wallet"
        },
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          }
        }
      }
    },
    "/document": {
      "post": {
        "tags": [
          "Document"
        ],
        "summary": "Add a document to your account.",
        "description": "FR4: The user must be able to manage their documents. (add document)\n",
        "operationId": "AddDocument",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        }
      }
    },
    "/document/{documentId}": {
      "get": {
        "tags": [
          "Document"
        ],
        "summary": "View a document in your account.",
        "description": "FR4: The user must be able to manage their documents. (view document)\n",
        "operationId": "ViewDocument",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "Id of the user's document",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Document"
        ],
        "summary": "Delete a document from your account.",
        "description": "FR4: The user must be able to manage their documents. (delete document)\n",
        "operationId": "DeleteDocument",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "Id of the user's document",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Search for other users.",
        "description": "FR5: The user must be able to search for other users by username.\n",
        "operationId": "SearchUsers",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "username provided for the search",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          }
        }
      }
    },
    "/notification": {
      "post": {
        "tags": [
          "Notification"
        ],
        "summary": "Create a notification.",
        "description": "FR6: The system must be able to notify the user about their upocoming events (create notification).\n",
        "operationId": "Notification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Notification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          }
        }
      }
    },
    "/notification/{notificationId}": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Receive a notification.",
        "description": "FR6: The system must be able to notify the user about their upocoming events (receive notification).\n",
        "operationId": "Notify",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "description": "Id of the notification",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          }
        }
      }
    },
    "/calendar/{calendarId}/event": {
      "post": {
        "tags": [
          "Calendar"
        ],
        "summary": "Add a new event in your calendar.",
        "description": "FR7: The user must be able to manage an event. (add event)\n",
        "operationId": "AddEvent",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Id of the user's calendar",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        }
      }
    },
    "/calendar/{calendarId}/event/{eventId}": {
      "put": {
        "tags": [
          "Event"
        ],
        "summary": "Edit an event in your calendar.",
        "description": "FR7: The user must be able to manage an event. (edit event)\n",
        "operationId": "EditEvent",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Id of the user's calendar",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the event that needs to be edited",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Event"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Calendar"
        ],
        "summary": "Delete an event from your calendar.",
        "description": "FR7: The user must be able to manage an event. (delete event)\n",
        "operationId": "DeleteEvent",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Id of the user's calendar",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the event that needs to be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          }
        }
      }
    },
    "/calendar/{calendarId}/event/{eventId}/document/{documentId}": {
      "put": {
        "tags": [
          "Document"
        ],
        "summary": "Add a document to an event.",
        "description": "FR8: The user must be able to manage their event documents. (add document to event)\n",
        "operationId": "AddDocumentEvent",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Id of the user's calendar",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the event that the user wants to add a document in",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Id of the document that the user wants to add",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Event"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Document"
        ],
        "summary": "Remove a document from an event.",
        "description": "FR8: The user must be able to manage their event documents. (remove document from an event)\n",
        "operationId": "DeleteDocumentEvent",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Id of the user's calendar",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the event that the user wants to remove a document from",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Id of the document that the user wants to remove",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          }
        }
      }
    },
    "/user/{inviteeId}/calendar/{calendarId}/event/{eventId}/invitation": {
      "post": {
        "tags": [
          "Invitation"
        ],
        "summary": "Invite a user to an event.",
        "description": "FR9: The user must be able to manage their event invitations. (invite other user to an event)\n",
        "operationId": "InviteEvent",
        "parameters": [
          {
            "name": "inviteeId",
            "in": "path",
            "description": "The userId of the user that is invited",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "calendarId",
            "in": "path",
            "description": "Id of the user's calendar",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the event",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Invitation"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              }
            }
          }
        }
      }
    },
    "/user/{inviterId}/calendar/{calendarId}/event/{eventId}/invitation/{invitationId}": {
      "get": {
        "tags": [
          "Invitation"
        ],
        "summary": "Receive an event invitation.",
        "description": "FR9: The user must be able to manage their event invitations. (receive invites from other users)\n",
        "operationId": "ReceiveEventInvite",
        "parameters": [
          {
            "name": "inviterId",
            "in": "path",
            "description": "The userId of the user that invites",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "calendarId",
            "in": "path",
            "description": "Id of the user's calendar",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the event",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "invitationId",
            "in": "path",
            "description": "Id of the event invitation",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              }
            }
          }
        }
      }
    },
    "/calendar/{calendarId}/event{eventId}/invitation{invitationId}": {
      "delete": {
        "tags": [
          "Invitation"
        ],
        "summary": "Cancel an event invitation.",
        "description": "FR9: The user must be able to manage their event invitations. (cancel event invitations)\n",
        "operationId": "CancelInvite",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Id of the user's calendar",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the event",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "invitationId",
            "in": "path",
            "description": "Id of the event invitation",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          }
        }
      }
    },
    "/invitation/{invitationId}": {
      "put": {
        "tags": [
          "Invitation"
        ],
        "summary": "Accept or decline an event invitation.",
        "description": "FR9: The user must be able to manage their event invitations. (accept or decline event invitations)\n",
        "operationId": "AcceptDeclineEventInvitation",
        "parameters": [
          {
            "name": "invitationId",
            "in": "path",
            "description": "The Id of the invitation.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Invitation"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              }
            }
          }
        }
      }
    },
    "/calendar/{calendarId}/findFreeSpots": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Find free spots in the user's calendar",
        "description": "FR10: The system must be able to find the free spots in the user's calendar.\n",
        "operationId": "FindFreeSpots",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Id of the user's calendar",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "$ref": "#/components/schemas/Calendar/properties/date"
                      },
                      "time": {
                        "$ref": "#/components/schemas/Calendar/properties/time"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Create an event.",
        "description": "FR11: The user must be able to create an event\n",
        "operationId": "CreateEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/Event"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userIds}/calendars/{calendarIds}/findCommonFreeSpots": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Find common free spots in the users' calendar",
        "description": "FR12: The system must be able to find the common free spots in the users' calendar.\n",
        "operationId": "FindCommonFreeSpots",
        "parameters": [
          {
            "name": "userIds",
            "in": "path",
            "description": "Ids of the users",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User/properties/userId"
              }
            }
          },
          {
            "name": "calendarIds",
            "in": "path",
            "description": "Ids of the users calendars",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Calendar/properties/calendarId"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "$ref": "#/components/schemas/Calendar/properties/date"
                      },
                      "time": {
                        "$ref": "#/components/schemas/Calendar/properties/time"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users{receiverIds}/coCreationRequest": {
      "post": {
        "tags": [
          "CoCreationRequest"
        ],
        "summary": "Send a co-creation request.",
        "description": "FR13: The user must be able to co-create events. (send co-creation request)\n",
        "operationId": "SendCoCreationRequest",
        "parameters": [
          {
            "name": "receiverIds",
            "in": "path",
            "description": "The userIds of the receivers of the co-creation request",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User/properties/userId"
              }
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CoCreationRequest"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoCreationRequest"
                }
              }
            }
          }
        }
      }
    },
    "/user/{senderId}/coCreationRequest/{coCreationId}": {
      "get": {
        "tags": [
          "CoCreationRequest"
        ],
        "summary": "Receive a co-creation request.",
        "description": "FR13: The user must be able to co-create events. (receive co-creation request)\n",
        "operationId": "ReceiveCoCreationRequest",
        "parameters": [
          {
            "name": "senderId",
            "in": "path",
            "description": "The userId of the sender of the co-creation request.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "coCreationId",
            "in": "path",
            "description": "Id of the co-creation request",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoCreationRequest"
                }
              }
            }
          }
        }
      }
    },
    "/coCreationRequest/{coCreationId}": {
      "put": {
        "tags": [
          "CoCreationRequest"
        ],
        "summary": "Respond (accept/decline) to a co-creation request, approve / disapprove the suggested time slot.",
        "description": "FR13: The user must be able to co-create events. (accept - decline co-creation request)\nFR14: The user must be able to approve/ disapprove the suggested timeslot.\n",
        "operationId": "CoCreation",
        "parameters": [
          {
            "name": "coCreationId",
            "in": "path",
            "description": "Id of the co-creation request",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "SuggestedTimeslot",
            "in": "query",
            "description": "Suggested Timeslot",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CoCreationRequest"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoCreationRequest"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userIds}/calendars/{calendarIds}/event": {
      "post": {
        "tags": [
          "Calendar"
        ],
        "summary": "Add an event to all attendants' calendars.",
        "description": "FR15: The system must be able to add the co-created event in the attendants' calendars.\n",
        "operationId": "AddAllCalendars",
        "parameters": [
          {
            "name": "userIds",
            "in": "path",
            "description": "Ids of the users",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User/properties/userId"
              }
            }
          },
          {
            "name": "calendarIds",
            "in": "path",
            "description": "Ids of the users calendars",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Calendar/properties/calendarId"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendars"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Wallet": {
        "type": "object",
        "required": [
          "walletId",
          "Cards",
          "NFCon"
        ],
        "properties": {
          "walletId": {
            "type": "integer"
          },
          "Cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Card"
            }
          },
          "NFCon": {
            "type": "boolean"
          }
        }
      },
      "Card": {
        "type": "object",
        "required": [
          "card_number",
          "card_holder",
          "exp_date",
          "cvv"
        ],
        "properties": {
          "card_number": {
            "type": "integer",
            "example": 1111222233334444
          },
          "card_holder": {
            "type": "string",
            "example": "Konstantinos Panagiotou"
          },
          "exp_date": {
            "type": "integer",
            "example": 22032032
          },
          "cvv": {
            "type": "integer",
            "example": 107
          }
        }
      },
      "Cards": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Card"
        }
      },
      "FriendRequest": {
        "type": "object",
        "required": [
          "senderId",
          "receiverId",
          "friendRequestId",
          "is_pending"
        ],
        "properties": {
          "senderId": {
            "type": "integer"
          },
          "receiverId": {
            "type": "integer"
          },
          "friendRequestId": {
            "type": "integer"
          },
          "is_pending": {
            "type": "boolean"
          }
        }
      },
      "Document": {
        "type": "object",
        "required": [
          "documentId"
        ],
        "properties": {
          "documentId": {
            "type": "integer"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "username",
          "password",
          "preferred_language",
          "email_address",
          "userId"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "preferred_language": {
            "type": "string",
            "enum": [
              "Greek",
              "English",
              "Spanish",
              "German",
              "French"
            ]
          },
          "email_address": {
            "type": "string"
          },
          "userId": {
            "type": "integer"
          }
        }
      },
      "Users": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/User"
        }
      },
      "Notification": {
        "type": "object",
        "required": [
          "notificationId"
        ],
        "properties": {
          "notificationId": {
            "type": "integer"
          },
          "notificationTime": {
            "type": "integer"
          }
        }
      },
      "Success": {
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "Calendar": {
        "type": "object",
        "properties": {
          "calendarId": {
            "type": "integer"
          },
          "month": {
            "type": "integer"
          },
          "year": {
            "type": "integer"
          },
          "date": {
            "type": "integer"
          },
          "time": {
            "type": "integer"
          },
          "Day": {
            "type": "string",
            "enum": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
              "Sunday"
            ]
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        }
      },
      "Calendars": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Calendar"
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer"
          },
          "date": {
            "type": "integer"
          },
          "time": {
            "type": "integer"
          },
          "place": {
            "type": "string"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "day": {
            "type": "string",
            "enum": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
              "Sunday"
            ]
          },
          "duration": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          }
        }
      },
      "Invitation": {
        "type": "object",
        "properties": {
          "invitationId": {
            "type": "integer"
          },
          "inviterId": {
            "type": "integer"
          },
          "inviteeId": {
            "type": "integer"
          },
          "is_pending": {
            "type": "boolean"
          },
          "eventId": {
            "type": "integer"
          }
        }
      },
      "CoCreationRequest": {
        "type": "object",
        "properties": {
          "coCreationId": {
            "type": "integer"
          },
          "senderId": {
            "type": "integer"
          },
          "receiverId": {
            "type": "integer"
          },
          "is_pending": {
            "type": "boolean"
          },
          "suggestedtimeslot": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "integer"
                },
                "time": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "requestBodies": {
      "FriendRequest": {
        "description": "Friend request model",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FriendRequest"
            }
          }
        },
        "required": true
      },
      "User": {
        "description": "User model",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "required": true
      },
      "Card": {
        "description": "Card model",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Card"
            }
          }
        }
      },
      "Wallet": {
        "description": "Wallet model",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Wallet"
            }
          }
        }
      },
      "Event": {
        "description": "Event model",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Event"
            }
          }
        }
      },
      "Invitation": {
        "description": "Invitation model",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Invitation"
            }
          }
        }
      },
      "CoCreationRequest": {
        "description": "CoCreationRequest model",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CoCreationRequest"
            }
          }
        }
      }
    }
  }
}